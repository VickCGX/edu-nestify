// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  email        String?        @unique
  name         String?
  password     String
  roleId       Int            @map("role_id")
  role         Role           @relation(fields: [roleId], references: [id])
  RefreshToken RefreshToken[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Notification Notification[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Teacher   Teacher[]

  @@map("departments")
}

model Subject {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  modules     Module[]    @relation("SubjectModules")
  teachers    Teacher[]   @relation("TeacherSubjects")
  materials   Material[]  @relation("MaterialSubject")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  Class       Class[]
  Timetable   Timetable[]

  @@map("subjects")
}

model Module {
  id        Int        @id @default(autoincrement())
  name      String
  content   String?
  subjectId Int        @map("subject_id")
  subject   Subject    @relation(fields: [subjectId], references: [id], name: "SubjectModules")
  materials Material[] @relation("MaterialModule")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("modules")
}

model Teacher {
  id             Int         @id @default(autoincrement())
  name           String
  email          String?     @unique
  dateOfBirth    DateTime?   @map("date_of_birth")
  hireDate       DateTime?   @default(now()) @map("hire_date")
  status         String?     @default("active")
  address        String?
  phoneNumber    String?     @map("phone_number")
  profilePicture String?     @map("profile_picture")
  gender         String?
  qualifications String?
  departmentId   Int?        @map("department_id")
  department     Department? @relation(fields: [departmentId], references: [id])
  subjects       Subject[]   @relation("TeacherSubjects")
  classes        Class[]
  notes          String?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  Feedback       Feedback[]

  @@map("teachers")
}

model Student {
  id              Int          @id @default(autoincrement())
  name            String
  email           String?      @unique
  dateOfBirth     DateTime?    @map("date_of_birth")
  enrollmentDate  DateTime     @default(now()) @map("enrollment_date")
  status          String       @default("active")
  address         String?
  phoneNumber     String?      @map("phone_number")
  profilePicture  String?      @map("profile_picture")
  gender          String?
  guardianName    String?      @map("guardian_name")
  guardianContact String?      @map("guardian_contact")
  notes           String?
  classes         Class[]
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  Score           Score[]
  Submission      Submission[]
  Attendance      Attendance[]
  Feedback        Feedback[]

  @@map("students")
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String
  teacherId    Int            @map("teacher_id")
  teacher      Teacher        @relation(fields: [teacherId], references: [id])
  students     Student[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Subject      Subject?       @relation(fields: [subjectId], references: [id])
  subjectId    Int?
  Quiz         Quiz[]
  Assignment   Assignment[]
  Attendance   Attendance[]
  Announcement Announcement[]
  Timetable    Timetable[]

  @@map("classes")
}

model Quiz {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  duration    Int            @map("duration") // Duration in minutes
  totalMarks  Int            @map("total_marks")
  startTime   DateTime       @map("start_time")
  endTime     DateTime       @map("end_time")
  status      String         @default("scheduled")
  classId     Int            @map("class_id")
  class       Class          @relation(fields: [classId], references: [id])
  questions   QuizQuestion[]
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  Score       Score[]
  Feedback    Feedback[]

  @@map("quizzes")
}

model QuizQuestion {
  id             Int                  @id @default(autoincrement())
  question       String
  quizId         Int                  @map("quiz_id")
  quiz           Quiz                 @relation(fields: [quizId], references: [id])
  options        QuizQuestionOption[]
  correctAnswers QuizCorrectAnswer[]
  QuestionType   QuestionType?        @relation(fields: [questionTypeId], references: [id])
  questionTypeId Int
}

model QuizQuestionOption {
  id                Int                 @id @default(autoincrement())
  text              String
  questionId        Int                 @map("question_id")
  quizQuestion      QuizQuestion        @relation(fields: [questionId], references: [id])
  QuizCorrectAnswer QuizCorrectAnswer[]
}

model QuizCorrectAnswer {
  id                 Int                @id @default(autoincrement())
  optionId           Int                @map("option_id")
  questionId         Int                @map("question_id")
  quizQuestion       QuizQuestion       @relation(fields: [questionId], references: [id])
  quizQuestionOption QuizQuestionOption @relation(fields: [optionId], references: [id])
}

model QuestionType {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  questions QuizQuestion[]

  @@map("question_types")
}

model Score {
  id        Int      @id @default(autoincrement())
  marks     Int
  studentId Int      @map("student_id")
  quizId    Int      @map("quiz_id")
  student   Student  @relation(fields: [studentId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("scores")
}

model Assignment {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime     @map("due_date")
  status      String       @default("pending")
  classId     Int          @map("class_id")
  class       Class        @relation(fields: [classId], references: [id])
  submissions Submission[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  Feedback    Feedback[]

  @@map("assignments")
}

model Submission {
  id            Int        @id @default(autoincrement())
  studentId     Int        @map("student_id")
  assignmentId  Int        @map("assignment_id")
  student       Student    @relation(fields: [studentId], references: [id])
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  submissionUrl String?    @map("submission_url")
  submittedAt   DateTime   @map("submitted_at")
  status        String     @default("submitted")
  grade         Int?
  feedback      String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("submissions")
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  date      DateTime @default(now())
  classId   Int?     @map("class_id")
  class     Class?   @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("announcements")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String   @default("present")
  studentId Int      @map("student_id")
  classId   Int      @map("class_id")
  student   Student  @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Timetable {
  id        Int      @id @default(autoincrement())
  classId   Int      @map("class_id")
  class     Class    @relation(fields: [classId], references: [id])
  day       String
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  subjectId Int      @map("subject_id")
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("timetables")
}

model Notification {
  id          Int      @id @default(autoincrement())
  content     String
  recipientId Int      @map("recipient_id")
  recipient   User     @relation(fields: [recipientId], references: [id])
  status      String   @default("unread")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model Feedback {
  id           Int         @id @default(autoincrement())
  content      String
  assignmentId Int?        @map("assignment_id")
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  quizId       Int?        @map("quiz_id")
  quiz         Quiz?       @relation(fields: [quizId], references: [id])
  studentId    Int         @map("student_id")
  student      Student     @relation(fields: [studentId], references: [id])
  teacherId    Int         @map("teacher_id")
  teacher      Teacher     @relation(fields: [teacherId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("feedbacks")
}

model Material {
  id             Int          @id @default(autoincrement())
  title          String
  content        String?
  path           String
  materialTypeId Int          @map("material_type_id")
  materialType   MaterialType @relation(fields: [materialTypeId], references: [id])
  subjectId      Int?         @map("subject_id")
  subject        Subject?     @relation(fields: [subjectId], references: [id], name: "MaterialSubject")
  moduleId       Int?         @map("module_id")
  module         Module?      @relation(fields: [moduleId], references: [id], name: "MaterialModule")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("materials")
}

model MaterialType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  materials   Material[]

  @@map("material_types")
}
